{"version":3,"sources":["components/Task.js","components/Tasks.js","components/TaskForm.js","components/Post.js","components/Navbar.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","state","fontSize","fontWeight","color","this","task","done","backgroundColor","textDecoration","key","id","style","stylesCompleted","title","description","checkbox","type","onChange","checkDone","bind","button","onClick","deleteTask","Component","borderRadius","outline","cursor","marginLeft","padding","border","margin","Tasks","tasks","map","TaskForm","onSubmit","e","preventDefault","addTask","setState","target","name","value","form","inputs","placeholder","display","flexDirection","width","Post","posts","fetch","res","json","data","console","log","post","body","Navbar","to","About","Fragment","App","newTask","length","newTasks","filter","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f6c1e6b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Task extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {  };\r\n\t}\r\n\tstylesCompleted(){\r\n\t\treturn{\r\n\t\t\tfontSize:\"20px\",\r\n\t\t\tfontWeight: '400',\r\n\t\t\tcolor:this.props.task.done?\"red\":\"green\",\r\n\t\t\tbackgroundColor: \"#00ffff\",\r\n\t\t\ttextDecoration:this.props.task.done?\"line-through\":\"none\"\r\n\t\t}\r\n\t}\r\n\trender() {\r\n\t\tconst {task}=this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t{/* DESTRUCTURING */}\r\n\t\t\t  <h1>NIVEL 3</h1>\r\n\t\t\t\t<p  key={task.id} style={this.stylesCompleted()}>\r\n\t\t\t\t\t{task.title} ---\r\n\t\t\t\t\t{task.description} ---\r\n\t\t\t\t\t{task.done} ---\r\n\t\t\t\t\t  {task.id}\r\n\r\n\t\t\t\t\t<input  style={checkbox} type=\"checkbox\"\r\n\t\t\t\t\tonChange={this.props.checkDone.bind(this, task.id)}/>\r\n\t\t\t\t\t<button style={button} \r\n\t\t\t\t\t\t\tonClick={this.props.deleteTask.bind(this, task.id)}>x</button>\r\n\t\t\t  </p>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nTask.propTypes={\r\n\ttask:PropTypes.object.isRequired\r\n\t\r\n}\r\nconst button={\r\n\tfontSize:\"15px\",\r\n\tborderRadius: \"50%\",\r\n\tbackgroundColor: \"#cecece\",\r\n\toutline: \"none\",\r\n    cursor: \"pointer\",\r\n\tmarginLeft: \"5px\",\r\n    padding: \"12px\",\r\n    border: \"none\"\r\n\t\r\n}\r\nconst checkbox={\r\n\tmargin:\" 0 20px\",\r\n    cursor:\" pointer\"\r\n}\r\nexport default Task;","import React, { Component } from 'react'\r\nimport Task from './Task';\r\nimport PropTypes from \"prop-types\";\r\nclass Tasks extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {};\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>NIVEL 2</h1>\r\n\t\t\t\t\t{this.props.tasks.map(task => \r\n\t\t\t\t\t\t<Task \r\n\t\t\t\t\t\ttask={task} \r\n\t\t\t\t\t\tkey={task.id}\r\n\t\t\t\t\t\tdeleteTask={this.props.deleteTask}\r\n\t\t\t\t\t\tcheckDone={this.props.checkDone}\r\n\t\t\t\t\t\t/>)}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\nTasks.propTypes={\r\n\ttasks:PropTypes.array.isRequired\r\n}\r\nexport default Tasks;","import React, { Component } from 'react';\r\nclass TaskForm extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = { \r\n\t\t\ttitle:\"\",\r\n\t\t\tdescription:\"\"\r\n\t\t };\r\n\t}\r\n\tonSubmit=(e)=>{\r\n\t\te.preventDefault()\r\n\t\tthis.props.addTask(this.state.title,this.state.description)\r\n\t}\r\n\tonChange = (e) => this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n\trender() {\r\n\t\t//solo para verificar el llamado a√± addTask\r\n\t\t//this.props.addTask()\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<form onSubmit={this.onSubmit} style={form}>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\tstyle={inputs}\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder=\"Write a new Task\" \r\n\t\t\t\t\t\tonChange={this.onChange} \r\n\t\t\t\t\t\tvalue={this.state.title}/>\r\n\t\t\t\t\t<textarea \r\n\t\t\t\t\t\tname=\"description\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tstyle={inputs}\r\n\t\t\t\t\t\tplaceholder=\"Write a description\" \r\n\t\t\t\t\t\tonChange={this.onChange} \r\n\t\t\t\t\t\tvalue={this.state.description}></textarea>\r\n\t\t\t\t\t<input type=\"submit\"/>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nconst form={\r\n\tdisplay: \"flex\",\r\n    flexDirection: \"column\",\r\n    width: \"27%\",\r\n    marginLeft: \"20px\"\r\n}\r\nconst inputs={\r\n\tmargin:\"10px 0 \"\r\n}\r\nexport default TaskForm;","import React, { Component } from 'react';\r\n\r\nclass Post extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tposts:[]\r\n\t\t  };\r\n\t}\r\n\tasync componentDidMount(){\r\n\t\tconst res=await fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n\t\tconst data=await res.json()\r\n\t\tconsole.log(data)\r\n\t\tthis.setState({posts:data})\r\n\t}\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.posts.map(post=>{\r\n\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t<ul key={post.id}>\r\n\t\t\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t\t\t<h4>{post.title}</h4>\r\n\t\t\t\t\t\t\t    \t<p>{post.body}</p>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Post;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <header>\r\n            <h1>TasksApp</h1>\r\n            <Link to=\"/\">Home</Link> - \r\n            <Link to=\"/About\">About</Link> - \r\n            <Link to=\"/Post\">Post</Link>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>SOBRE NOSOTROS</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { Component } from 'react';\r\nimport tasks from \"./sample/tasks.json\";\r\nimport Tasks from './components/Tasks';\r\nimport TaskForm from './components/TaskForm';\r\nimport Post from './components/Post';\r\nimport Navbar from './components/Navbar';\r\nimport About from './components/About';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\ttasks: tasks\r\n\t\t}\r\n\t}\r\n\r\n\taddTask = (title, description) => {\r\n\t\t// console.log(\"recibiendo datos desde APP\")\r\n\t\t// console.log(title,description)\r\n\t\tconst newTask = {\r\n\t\t\ttitle: title,\r\n\t\t\tdescription: description,\r\n\t\t\tid: this.state.tasks.length\r\n\t\t}\r\n\t\tconsole.log(newTask)\r\n\t\tthis.setState({\r\n\t\t\ttasks: [...this.state.tasks, newTask]\r\n\t\t})\r\n\t}\r\n\tdeleteTask = (id) => {\r\n\t\tconst newTasks = this.state.tasks.filter(task => task.id !== id)\r\n\t\tconsole.log(newTasks)\r\n\t\tthis.setState({ tasks: newTasks })\r\n\t}\r\n\tcheckDone = (id) => {\r\n\t\tconst newTasks = this.state.tasks.map(task => {\r\n\t\t\tif (task.id === id) {\r\n\t\t\t\ttask.done = !task.done\r\n\t\t\t}\r\n\t\t\treturn task;\r\n\t\t})\r\n\t\tthis.setState({ tasks: newTasks })\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n      <Router>\r\n        <div>\r\n          <Navbar />\r\n          <Route exact path=\"/\" render={props => (\r\n            <React.Fragment>\r\n              <TaskForm addTask={this.addTask} />\r\n              <Tasks\r\n                tasks={this.state.tasks}\r\n                checkDone={this.checkDone}\r\n                deleteTask={this.deleteTask}\r\n              />\r\n            </React.Fragment>\r\n          )}>\r\n          </Route>\r\n          <Route path=\"/About\" component={About} />\r\n          <Route path=\"/Post\" component={Post}/>\r\n        </div>\r\n      </Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}